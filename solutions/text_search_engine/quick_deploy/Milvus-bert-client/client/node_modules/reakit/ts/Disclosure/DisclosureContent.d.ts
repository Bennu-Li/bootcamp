import * as React from "react";
import { unstable_IdGroupOptions, unstable_IdGroupHTMLProps } from "../Id/IdGroup";
import { DisclosureStateReturn } from "./DisclosureState";
export declare type DisclosureContentOptions = unstable_IdGroupOptions & Pick<Partial<DisclosureStateReturn>, "visible" | "unstable_animating" | "unstable_animated" | "unstable_stopAnimation" | "unstable_setIsMounted">;
export declare type DisclosureContentHTMLProps = unstable_IdGroupHTMLProps;
export declare type DisclosureContentProps = DisclosureContentOptions & DisclosureContentHTMLProps;
export declare const useDisclosureContent: {
    (options?: DisclosureContentOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined, unstable_ignoreUseOptions?: boolean | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: DisclosureContentOptions, htmlProps: import("..").BoxHTMLProps) => DisclosureContentOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }) => boolean) | undefined;
};
export declare const DisclosureContent: import("reakit-system/src/createComponent").Component<"div", DisclosureContentOptions>;
