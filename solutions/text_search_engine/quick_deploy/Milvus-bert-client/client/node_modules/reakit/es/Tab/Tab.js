import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectWithoutPropertiesLoose, _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useCallback } from 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import 'reakit-warning';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import 'reakit-utils/createOnKeyDown';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import 'reakit-utils/applyState';
import '../CompositeState-e3303152.js';
import '../Id/Id.js';
import 'reakit-utils/getDocument';
import 'reakit-utils/isTextField';
import 'reakit-utils/scrollIntoViewIfNeeded';
import 'reakit-utils/useLiveRef';
import '../setTextFieldValue-24aa34ae.js';
import { unstable_useCompositeItem } from '../Composite/CompositeItem.js';
import { useTabState } from './TabState.js';

function getTabPanelId(options) {
  var _options$panels, _options$panels$find;

  return ((_options$panels = options.panels) === null || _options$panels === void 0 ? void 0 : (_options$panels$find = _options$panels.find(function (panel) {
    return panel.groupId === options.id;
  })) === null || _options$panels$find === void 0 ? void 0 : _options$panels$find.id) || undefined;
}

var useTab = createHook({
  name: "Tab",
  compose: unstable_useCompositeItem,
  useState: useTabState,
  useOptions: function useOptions(_ref) {
    var _ref$focusable = _ref.focusable,
        focusable = _ref$focusable === void 0 ? true : _ref$focusable,
        options = _objectWithoutPropertiesLoose(_ref, ["focusable"]);

    return _objectSpread2({
      focusable: focusable,
      id: options.stopId
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlOnClick = _ref2.onClick,
        htmlOnFocus = _ref2.onFocus,
        htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onClick", "onFocus"]);

    var selected = options.selectedId === options.id;
    var onClick = useCallback(function () {
      if (options.id && !options.disabled && !selected) {
        var _options$select;

        (_options$select = options.select) === null || _options$select === void 0 ? void 0 : _options$select.call(options, options.id);
      }
    }, [options.disabled, selected, options.select, options.id]);
    var onFocus = useCallback(function () {
      if (options.id && !options.disabled && !options.manual && !selected) {
        var _options$select2;

        (_options$select2 = options.select) === null || _options$select2 === void 0 ? void 0 : _options$select2.call(options, options.id);
      }
    }, [options.id, options.disabled, options.manual, selected, options.select]);
    return _objectSpread2({
      role: "tab",
      "aria-selected": selected,
      "aria-controls": getTabPanelId(options),
      onClick: useAllCallbacks(onClick, htmlOnClick),
      onFocus: useAllCallbacks(onFocus, htmlOnFocus)
    }, htmlProps);
  }
});
var Tab = createComponent({
  as: "button",
  useHook: useTab
});

export { Tab, useTab };
