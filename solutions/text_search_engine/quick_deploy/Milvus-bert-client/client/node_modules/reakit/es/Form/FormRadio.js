import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { _ as _objectSpread2, a as _objectWithoutPropertiesLoose } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useContext, useCallback } from 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import 'reakit-warning';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../Id/IdGroup.js';
import 'reakit-utils/applyState';
import '../CompositeState-e3303152.js';
import '../Composite/Composite.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Group/Group.js';
import '../Id/Id.js';
import '../Composite/CompositeGroup.js';
import 'reakit-utils/getDocument';
import 'reakit-utils/isTextField';
import 'reakit-utils/scrollIntoViewIfNeeded';
import 'reakit-utils/useLiveRef';
import '../setTextFieldValue-24aa34ae.js';
import '../Composite/CompositeItem.js';
import '../Composite/CompositeItemWidget.js';
import 'reakit-utils/usePipe';
import 'reakit-utils/useUpdateEffect';
import 'reakit-utils/isPromise';
import 'reakit-utils/isEmpty';
import 'reakit-utils/isPlainObject';
import { unstable_useFormState } from './FormState.js';
import 'reakit-utils/isObject';
import './utils/setAllIn.js';
import { unstable_getIn } from './utils/getIn.js';
import 'reakit-utils/toArray';
import 'reakit-utils/isInteger';
import './utils/setIn.js';
import { f as formatInputName } from '../getInputId-aa144169.js';
import '../getLabelId-3db05e97.js';
import '../shouldShowError-9263056a.js';
import './FormGroup.js';
import '../Radio/RadioState.js';
import { useRadio } from '../Radio/Radio.js';
import { FormRadioGroupContext } from './FormRadioGroup.js';

var unstable_useFormRadio = createHook({
  name: "FormRadio",
  compose: useRadio,
  useState: unstable_useFormState,
  keys: ["name", "value"],
  useOptions: function useOptions(options, htmlProps) {
    var name = options.name || htmlProps.name;
    var value = typeof options.value !== "undefined" ? options.value : htmlProps.value;
    var composite = useContext(FormRadioGroupContext);
    var currentChecked = unstable_getIn(options.values, name);
    var checked = currentChecked === value;

    if (!composite) {
      // TODO: Better error
      throw new Error("Missing FormRadioGroup");
    }

    return _objectSpread2({}, options, {}, composite, {
      checked: checked,
      name: name,
      value: value
    });
  },
  useProps: function useProps(options, _ref) {
    var htmlOnChange = _ref.onChange,
        htmlOnBlur = _ref.onBlur,
        htmlProps = _objectWithoutPropertiesLoose(_ref, ["onChange", "onBlur"]);

    var onChange = useCallback(function () {
      options.update(options.name, options.value);
    }, [options.update, options.name, options.value]);
    var onBlur = useCallback(function () {
      options.blur(options.name);
    }, [options.blur, options.name]);
    return _objectSpread2({
      name: formatInputName(options.name),
      onChange: useAllCallbacks(onChange, htmlOnChange),
      onBlur: useAllCallbacks(onBlur, htmlOnBlur)
    }, htmlProps);
  }
});
var unstable_FormRadio = createComponent({
  as: "input",
  useHook: unstable_useFormRadio
});

export { unstable_FormRadio, unstable_useFormRadio };
