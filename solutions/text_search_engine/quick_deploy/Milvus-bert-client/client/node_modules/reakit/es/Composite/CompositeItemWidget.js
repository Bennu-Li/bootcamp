import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import { useBox } from '../Box/Box.js';
import { a as _objectWithoutPropertiesLoose, _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useRef, useCallback } from 'react';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import 'reakit-utils/applyState';
import { u as unstable_useCompositeState } from '../CompositeState-e3303152.js';
import { getDocument } from 'reakit-utils/getDocument';
import { isTextField } from 'reakit-utils/isTextField';
import { s as setTextFieldValue } from '../setTextFieldValue-24aa34ae.js';

function focusCurrentItem(widget, currentId) {
  if (currentId) {
    var _getDocument$getEleme;

    (_getDocument$getEleme = getDocument(widget).getElementById(currentId)) === null || _getDocument$getEleme === void 0 ? void 0 : _getDocument$getEleme.focus();
  }
}

function getTextFieldValue(element) {
  if (element.isContentEditable) {
    return element.innerHTML;
  }

  return element.value;
}

var unstable_useCompositeItemWidget = createHook({
  name: "CompositeItemWidget",
  compose: useBox,
  useState: unstable_useCompositeState,
  useProps: function useProps(options, _ref) {
    var htmlOnFocus = _ref.onFocus,
        htmlOnBlur = _ref.onBlur,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlProps = _objectWithoutPropertiesLoose(_ref, ["onFocus", "onBlur", "onKeyDown"]);

    var initialValue = useRef("");
    var onFocus = useCallback(function (event) {
      var _options$unstable_set;

      (_options$unstable_set = options.unstable_setHasActiveWidget) === null || _options$unstable_set === void 0 ? void 0 : _options$unstable_set.call(options, true);

      if (isTextField(event.currentTarget)) {
        initialValue.current = getTextFieldValue(event.currentTarget);
      }
    }, [options.unstable_setHasActiveWidget]);
    var onBlur = useCallback(function () {
      var _options$unstable_set2;

      (_options$unstable_set2 = options.unstable_setHasActiveWidget) === null || _options$unstable_set2 === void 0 ? void 0 : _options$unstable_set2.call(options, false);
    }, [options.unstable_setHasActiveWidget]);
    var onKeyDown = useCallback(function (event) {
      if (event.currentTarget !== event.target) return;
      if (event.nativeEvent.isComposing) return;
      var self = event.currentTarget;

      if (event.key === "Enter") {
        if (isTextField(self)) {
          var isMultilineTextField = self.tagName === "TEXTAREA" || self.isContentEditable; // Make sure we can create new lines using Shift+Enter

          if (isMultilineTextField && event.shiftKey) return; // Make sure it'll not trigger a click on the parent button

          event.preventDefault();
          focusCurrentItem(self, options.currentId);
        }
      } else if (event.key === "Escape") {
        focusCurrentItem(self, options.currentId);

        if (isTextField(self)) {
          setTextFieldValue(self, initialValue.current);
        }
      }
    }, [options.currentId]);
    return _objectSpread2({
      tabIndex: options.unstable_hasActiveWidget ? 0 : -1,
      onFocus: useAllCallbacks(onFocus, htmlOnFocus),
      onBlur: useAllCallbacks(onBlur, htmlOnBlur),
      onKeyDown: useAllCallbacks(onKeyDown, htmlOnKeyDown),
      "data-composite-item-widget": true
    }, htmlProps);
  }
});
var unstable_CompositeItemWidget = createComponent({
  as: "div",
  useHook: unstable_useCompositeItemWidget
});

export { unstable_CompositeItemWidget, unstable_useCompositeItemWidget };
