import * as React from "react";
import { BoxOptions, BoxHTMLProps } from "../Box/Box";
import { unstable_CompositeStateReturn } from "./CompositeState";
export declare type unstable_CompositeItemWidgetOptions = BoxOptions & Pick<Partial<unstable_CompositeStateReturn>, "wrap"> & Pick<unstable_CompositeStateReturn, "unstable_hasActiveWidget" | "unstable_setHasActiveWidget" | "currentId">;
export declare type unstable_CompositeItemWidgetHTMLProps = BoxHTMLProps;
export declare type unstable_CompositeItemWidgetProps = unstable_CompositeItemWidgetOptions & unstable_CompositeItemWidgetHTMLProps;
export declare const unstable_useCompositeItemWidget: {
    (options?: unstable_CompositeItemWidgetOptions | undefined, htmlProps?: BoxHTMLProps | undefined, unstable_ignoreUseOptions?: boolean | undefined): BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: unstable_CompositeItemWidgetOptions, htmlProps: BoxHTMLProps) => unstable_CompositeItemWidgetOptions;
    __propsAreEqual?: ((prev: BoxOptions & Pick<Partial<unstable_CompositeStateReturn>, "wrap"> & Pick<unstable_CompositeStateReturn, "currentId" | "unstable_hasActiveWidget" | "unstable_setHasActiveWidget"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }, next: BoxOptions & Pick<Partial<unstable_CompositeStateReturn>, "wrap"> & Pick<unstable_CompositeStateReturn, "currentId" | "unstable_hasActiveWidget" | "unstable_setHasActiveWidget"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }) => boolean) | undefined;
};
export declare const unstable_CompositeItemWidget: import("reakit-system/src/createComponent").Component<"div", unstable_CompositeItemWidgetOptions>;
