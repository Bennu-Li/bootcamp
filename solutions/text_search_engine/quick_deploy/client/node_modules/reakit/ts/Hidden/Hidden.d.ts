/// <reference types="react" />
import { DisclosureContentOptions, DisclosureContentHTMLProps } from "../Disclosure/DisclosureContent";
export declare type HiddenOptions = DisclosureContentOptions;
export declare type HiddenHTMLProps = DisclosureContentHTMLProps;
export declare type HiddenProps = HiddenOptions & HiddenHTMLProps;
export declare const useHidden: {
    (options?: DisclosureContentOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined, unstable_ignoreUseOptions?: boolean | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: DisclosureContentOptions, htmlProps: import("..").BoxHTMLProps) => DisclosureContentOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        wrapElement?: ((element: import("react").ReactNode) => import("react").ReactNode) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        wrapElement?: ((element: import("react").ReactNode) => import("react").ReactNode) | undefined;
    }) => boolean) | undefined;
};
export declare const Hidden: import("reakit-system/src/createComponent").Component<"div", DisclosureContentOptions>;
