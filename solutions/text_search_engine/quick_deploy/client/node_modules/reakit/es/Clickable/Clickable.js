import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectWithoutPropertiesLoose, _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useState, useCallback } from 'react';
import 'reakit-utils/useForkRef';
import { isButton } from 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import 'reakit-warning';
import { useTabbable } from '../Tabbable/Tabbable.js';

function isNativeClick(event) {
  var self = event.currentTarget;
  if (!event.isTrusted) return false;
  return isButton(self) || self.tagName === "A" || self.tagName === "SELECT";
}

var useClickable = createHook({
  name: "Clickable",
  compose: useTabbable,
  keys: ["unstable_clickOnEnter", "unstable_clickOnSpace"],
  useOptions: function useOptions(_ref) {
    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,
        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? true : _ref$unstable_clickOn,
        _ref$unstable_clickOn2 = _ref.unstable_clickOnSpace,
        unstable_clickOnSpace = _ref$unstable_clickOn2 === void 0 ? true : _ref$unstable_clickOn2,
        options = _objectWithoutPropertiesLoose(_ref, ["unstable_clickOnEnter", "unstable_clickOnSpace"]);

    return _objectSpread2({
      unstable_clickOnEnter: unstable_clickOnEnter,
      unstable_clickOnSpace: unstable_clickOnSpace
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlOnKeyDown = _ref2.onKeyDown,
        htmlOnKeyUp = _ref2.onKeyUp,
        htmlProps = _objectWithoutPropertiesLoose(_ref2, ["onKeyDown", "onKeyUp"]);

    var _React$useState = useState(false),
        active = _React$useState[0],
        setActive = _React$useState[1];

    var onKeyDown = useCallback(function (event) {
      if (htmlOnKeyDown) {
        htmlOnKeyDown(event);
      }

      if (options.disabled || event.defaultPrevented || event.metaKey) {
        return;
      }

      var isEnter = options.unstable_clickOnEnter && event.key === "Enter";
      var isSpace = options.unstable_clickOnSpace && event.key === " ";

      if (isEnter || isSpace) {
        if (isNativeClick(event)) return;
        event.preventDefault();

        if (isEnter) {
          event.currentTarget.click();
        } else if (isSpace) {
          setActive(true);
        }
      }
    }, [options.disabled, htmlOnKeyDown, options.unstable_clickOnEnter, options.unstable_clickOnSpace]);
    var onKeyUp = useCallback(function (event) {
      if (htmlOnKeyUp) {
        htmlOnKeyUp(event);
      }

      if (options.disabled || event.defaultPrevented || event.metaKey) {
        return;
      }

      var isSpace = options.unstable_clickOnSpace && event.key === " ";

      if (active && isSpace) {
        setActive(false);
        event.currentTarget.click();
      }
    }, [options.disabled, htmlOnKeyUp, active, options.unstable_clickOnSpace]);
    return _objectSpread2({
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp
    }, active ? {
      "data-active": active
    } : {}, {}, htmlProps);
  }
});
var Clickable = createComponent({
  as: "button",
  useHook: useClickable
});

export { Clickable, useClickable };
