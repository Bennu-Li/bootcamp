import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectWithoutPropertiesLoose, _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useRef, useCallback, useEffect, useState } from 'react';
import { useForkRef } from 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import 'reakit-warning';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../Id/IdGroup.js';
import 'reakit-utils/applyState';
import '../CompositeState-e3303152.js';
import '../Composite/Composite.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Group/Group.js';
import '../Id/Id.js';
import '../Composite/CompositeGroup.js';
import 'reakit-utils/getDocument';
import 'reakit-utils/isTextField';
import 'reakit-utils/scrollIntoViewIfNeeded';
import { useLiveRef } from 'reakit-utils/useLiveRef';
import '../setTextFieldValue-24aa34ae.js';
import { unstable_useCompositeItem } from '../Composite/CompositeItem.js';
import '../Composite/CompositeItemWidget.js';
import { useRadioState } from './RadioState.js';

function getChecked(options) {
  if (typeof options.checked !== "undefined") {
    return options.checked;
  }

  return options.value && options.state === options.value;
}

function useInitialChecked(options) {
  var _React$useState = useState(function () {
    return getChecked(options);
  }),
      initialChecked = _React$useState[0];

  var _React$useState2 = useState(options.currentId),
      initialCurrentId = _React$useState2[0];

  var id = options.id,
      setCurrentId = options.setCurrentId;
  useEffect(function () {
    if (initialChecked && id && initialCurrentId !== id) {
      setCurrentId === null || setCurrentId === void 0 ? void 0 : setCurrentId(id);
    }
  }, [initialChecked, id, setCurrentId, initialCurrentId]);
}

function dispatchChange(element, onChange, originalEvent) {
  var event = originalEvent || new Event("change", {
    bubbles: true,
    cancelable: false
  });
  Object.defineProperties(event, {
    type: {
      value: "change"
    },
    target: {
      value: element
    },
    currentTarget: {
      value: element
    }
  });
  onChange === null || onChange === void 0 ? void 0 : onChange(event);
}

var useRadio = createHook({
  name: "Radio",
  compose: unstable_useCompositeItem,
  useState: useRadioState,
  keys: ["value", "checked"],
  useOptions: function useOptions(_ref, _ref2) {
    var value = _ref2.value,
        checked = _ref2.checked;

    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,
        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? false : _ref$unstable_clickOn,
        _ref$unstable_checkOn = _ref.unstable_checkOnFocus,
        unstable_checkOnFocus = _ref$unstable_checkOn === void 0 ? true : _ref$unstable_checkOn,
        options = _objectWithoutPropertiesLoose(_ref, ["unstable_clickOnEnter", "unstable_checkOnFocus"]);

    return _objectSpread2({
      value: value,
      checked: checked,
      unstable_clickOnEnter: unstable_clickOnEnter,
      unstable_checkOnFocus: unstable_checkOnFocus
    }, options);
  },
  useProps: function useProps(options, _ref3) {
    var htmlRef = _ref3.ref,
        htmlOnChange = _ref3.onChange,
        htmlOnClick = _ref3.onClick,
        htmlProps = _objectWithoutPropertiesLoose(_ref3, ["ref", "onChange", "onClick"]);

    var ref = useRef(null);
    var checked = getChecked(options);
    var isCurrentItemRef = useLiveRef(options.currentId === options.id);
    useInitialChecked(options);
    var onChange = useCallback(function (event) {
      var _options$setState;

      htmlOnChange === null || htmlOnChange === void 0 ? void 0 : htmlOnChange(event);
      if (options.disabled || event.defaultPrevented) return;
      (_options$setState = options.setState) === null || _options$setState === void 0 ? void 0 : _options$setState.call(options, options.value);
    }, [htmlOnChange, options.disabled, options.setState, options.value]);
    var onClick = useCallback(function (event) {
      var self = event.currentTarget;
      if (self.tagName === "INPUT") return;
      dispatchChange(self, onChange);
    }, [options.unstable_checkOnFocus, onChange]);
    useEffect(function () {
      var self = ref.current;
      if (!self) return;

      if (options.unstable_moves && isCurrentItemRef.current && options.unstable_checkOnFocus) {
        dispatchChange(self, onChange);
      }
    }, [options.unstable_moves, options.unstable_checkOnFocus, onChange]);
    return _objectSpread2({
      ref: useForkRef(ref, htmlRef),
      checked: checked,
      "aria-checked": checked,
      value: options.value,
      role: "radio",
      type: "radio",
      onChange: onChange,
      onClick: useAllCallbacks(onClick, htmlOnClick)
    }, htmlProps);
  }
});
var Radio = createComponent({
  as: "input",
  useHook: useRadio
});

export { Radio, useRadio };
