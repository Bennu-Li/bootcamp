import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import { useBox } from '../Box/Box.js';
import { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-ce04ac6e.js';
import { useContext, useState, useEffect } from 'react';
import 'reakit-utils/useSealedState';
import { unstable_IdContext } from './IdProvider.js';
import { unstable_useIdState } from './IdState.js';

var unstable_useIdGroup = createHook({
  name: "IdGroup",
  compose: useBox,
  useState: unstable_useIdState,
  keys: ["id"],
  useOptions: function useOptions(options, htmlProps) {
    var generateId = useContext(unstable_IdContext);

    var _React$useState = useState(function () {
      return htmlProps.id || options.id || options.baseId || generateId();
    }),
        baseId = _React$useState[0];

    useEffect(function () {
      // If there's useIdState and IdGroup has received a different id, then set
      // the baseId on the state.
      if (baseId !== options.baseId) {
        var _options$unstable_set;

        (_options$unstable_set = options.unstable_setBaseId) === null || _options$unstable_set === void 0 ? void 0 : _options$unstable_set.call(options, baseId);
      }
    }, [options.unstable_setBaseId, baseId, options.baseId]);
    return _objectSpread2({}, options, {
      baseId: baseId
    });
  },
  useProps: function useProps(options, htmlProps) {
    return _objectSpread2({
      id: options.id
    }, htmlProps);
  }
});
var unstable_IdGroup = createComponent({
  as: "div",
  useHook: unstable_useIdGroup
});

export { unstable_IdGroup, unstable_useIdGroup };
