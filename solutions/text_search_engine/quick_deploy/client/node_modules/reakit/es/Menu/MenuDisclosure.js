import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import '../_rollupPluginBabelHelpers-ce04ac6e.js';
import 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import { useWarning } from 'reakit-warning';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import '../Button/Button.js';
import 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../Id/IdGroup.js';
import 'reakit-utils/applyState';
import '../CompositeState-e3303152.js';
import '../Composite/Composite.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Group/Group.js';
import '../Id/Id.js';
import '../Composite/CompositeGroup.js';
import 'reakit-utils/getDocument';
import 'reakit-utils/isTextField';
import 'reakit-utils/scrollIntoViewIfNeeded';
import 'reakit-utils/useLiveRef';
import '../setTextFieldValue-24aa34ae.js';
import '../Composite/CompositeItem.js';
import '../Composite/CompositeItemWidget.js';
import '../Disclosure/DisclosureState.js';
import 'reakit-utils/removeItemFromArray';
import '../Dialog/DialogState.js';
import '../Disclosure/Disclosure.js';
import '../Dialog/DialogDisclosure.js';
import '@popperjs/core';
import '../Popover/PopoverState.js';
import '../MenuState-5c873609.js';
import './MenuBarState.js';
import '../Popover/PopoverDisclosure.js';
import { useMenuButton } from './MenuButton.js';

var useMenuDisclosure = createHook({
  name: "MenuDisclosure",
  compose: useMenuButton,
  useProps: function useProps(_, htmlProps) {
    process.env.NODE_ENV !== "production" ? useWarning(true, "`MenuDisclosure` has been renamed to `MenuButton`. Using `<MenuDisclosure />` will no longer work in future versions.", "See https://reakit.io/docs/menu") : void 0;
    return htmlProps;
  }
});
var MenuDisclosure = createComponent({
  as: "button",
  useHook: useMenuDisclosure
});

export { MenuDisclosure, useMenuDisclosure };
